clc
clear all
close all

%% user input
funcIndices = 1;  % 1~13
numRuns = 1;

%%
% load configuration and benchmark
configurations
configuration.funcIndices = funcIndices;
configuration.numRuns = numRuns;

log="";

% Loop over functions
for funcIdx = configuration.funcIndices
    functionInfo=benchmark(funcIdx);
    objFunc=functionInfo.funcName{1};
    n=functionInfo.dimension;
    lb=functionInfo.bounds(1);
    ub=functionInfo.bounds(2);
    numGens=configuration.generations(funcIdx);
    
    % Initialise population
    mu=100;
    InitialPop=lb+(ub-lb).*rand(mu,n); % individuals
    InitialPop=boundData(InitialPop,lb,ub);
   
    % FEP
    log=log+sprintf('[FEP Optimisation of function %s]\n',objFunc);
    resFEP=zeros(configuration.numRuns,1);
    plotFEPBest=zeros(configuration.numRuns,numGens);
    plotFEPAvg=zeros(configuration.numRuns,numGens);
    for r=1:configuration.numRuns
        [bestx, recordedAvgY, recordedBestY]=FEP(objFunc,n,lb,ub,numGens,InitialPop);
        recordedBestY=-recordedBestY;
        recordedAvgY=-recordedAvgY;
        besty=recordedBestY(end);
        log=log+sprintf('RUN %d: Approximate optimal value=%.16f\n', r, besty);
        log=log+sprintf('RUN %d: Approximate optimum=%s\n', r, mat2str(bestx));
        resFEP(r)=besty;
        plotFEPBest(r,:)=recordedBestY;
        plotFEPAvg(r,:)=recordedAvgY;
    end
    log=log+sprintf('FINAL: Averaged approximate optimal value=%.16f (%.16f)\n\n', ...
        mean(resFEP), std(resFEP));
    
    % Plot
    subplot(121)
    plot(mean(plotFEPBest,1),'b', 'LineWidth', 2)
    legend('Best of FEP');
    subplot(122)
    plot(mean(plotFEPAvg,1),'b', 'LineWidth', 2)
    legend('Average of FEP');

end

disp(log)

